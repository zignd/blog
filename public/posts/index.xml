<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zignd&#39;s blog</title>
    <link>http://blog.zignd.dev/posts/</link>
    <description>Recent content in Posts on Zignd&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.zignd.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concurrent iterations in Go</title>
      <link>http://blog.zignd.dev/posts/concurrent-iterations-go/</link>
      <pubDate>Mon, 27 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zignd.dev/posts/concurrent-iterations-go/</guid>
      <description>The Go programming language is very flexible when it comes to concurrency, the language syntax allows you create most of the concurrency flows that might come to your mind. But with this flexibility comes some complexity too. Below you will find some code I wrote when I was experimenting with the tools available in the default packages in order to build a few concurrent flows that came to my mind. The code is below is documented with comments placed where I found worth documenting.</description>
    </item>
    
  </channel>
</rss>